---
layout: post
title: "38译码器的15种写法"
date: 2013-08-04 21:30
comments: true
keywords: 
description: 
published: true
categories: fpga verilog
---
1. [标准写法](#decoder38_1)
2. [两个always](#decoder38_2)
3. [一个always搞定](#decoder38_3)
4. [改成if else](#decoder38_4)
5. [只用assign](#decoder38_5)
6. [for循环1](#decoder38_6)
7. [for循环2](#decoder38_7)
8. [两行代码搞定](#decoder38_8)
9. [一行代码搞定](#decoder38_9)
10. [调用function](#decoder38_10)
11. [调用task](#decoder38_11)
12. [调用module](#decoder38_12)
13. [原理图方式](#decoder38_13)
14. [真值表描述](#decoder38_14)
15. [门级描述](#decoder38_15)

<h2 id="decoder38_1">1.标准写法</h2>

### Verilog
{% include_code decoder38/decoder38_1.v %}

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_1_rtl.png)

### Simulation 
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_simulation.png)

<h2 id="decoder38_2">2.两个always</h2>

### Verilog
{% include_code decoder38/decoder38_2.v %}

### Rtl
同上

<h2 id="decoder38_3">3.一个always搞定</h2>

### Verilog
{% include_code decoder38/decoder38_3.v %}

### Rtl
同上

<h2 id="decoder38_4">4.改成if else</h2>

### Verilog
{% include_code decoder38/decoder38_4.v %}

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_4_rtl.png)

<h2 id="decoder38_5">5.只用assign</h2>

### Verilog
{% include_code decoder38/decoder38_5.v %}

### Rtl
同上

<h2 id="decoder38_6">6.for循环1</h2>

### Verilog
{% include_code decoder38/decoder38_6.v %}

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_6_rtl.png)

<h2 id="decoder38_7">7.for循环2</h2>

### Verilog
{% include_code decoder38/decoder38_7.v %}

### Rtl
同上

<h2 id="decoder38_8">8.两行代码搞定</h2>

### Verilog
{% include_code decoder38/decoder38_8.v %}

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_8_rtl.png)

<h2 id="decoder38_9">9.一行代码搞定</h2>

### Verilog
{% include_code decoder38/decoder38_9.v %}

### Rtl
同上

<h2 id="decoder38_10">10.调用function</h2>

### Verilog
{% include_code decoder38/decoder38_10.v %}

### Rtl
同上

<h2 id="decoder38_11">11.调用task</h2>

### Verilog
{% include_code decoder38/decoder38_11.v %}

### Rtl
同上

<h2 id="decoder38_12">12.调用module</h2>

### Verilog
{% include_code decoder38/decoder38_12.v %}
{% include_code decoder38/decoder38_12_base.v %}

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_12_rtl.png)
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_12_base_rtl.png)

<h2 id="decoder38_13">13.原理图方式</h2>
好久没画原理图了，在Quartus中画原理图又让我找回了一点点感觉，特意增加了链接，点击可直接查看大图。
### 原理图 
[![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_13_bdf.png)](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_13_bdf.png)

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_13_rtl.png)

<h2 id="decoder38_14">14.真值表描述</h2>
不知道以前是在哪看到的，说Quartus支持真值表文件描述，结果到写的时侯，找了一圈，才发现Quartus没有这个功能，好在，搜索的过程中发现AHDL支持真值表描述，于是我就用AHDL写了一个，写完后突然想起来，其实Verilog也有类似的写法，于是我又用Verilog写了一个。两种语言的写法很相似，它们生成的Rtl也是一样的。可以发现，用真值表描述，电路最简。（由于`pygments`和`gist`都不支持AHDL语言，所以AHDL代码没有语法高亮。）
### AHDL
``` text (decoder38_14.tdf) http://postget.me/downloads/code/decoder38/decoder38_14.tdf download 
SUBDESIGN decoder38_14
(
    i_sel[2..0] : INPUT;
    i_opt : INPUT;
    o_y[7..0] : OUTPUT;
)

BEGIN
    TABLE
        i_sel[2..0], i_opt => o_y[7..0];
        0, 0 => B"11111110";
        1, 0 => B"11111101";
        2, 0 => B"11111011";
        3, 0 => B"11110111";
        4, 0 => B"11101111";
        5, 0 => B"11011111";
        6, 0 => B"10111111";
        7, 0 => B"01111111";
        0, 1 => B"00000001";
        1, 1 => B"00000010";
        2, 1 => B"00000100";
        3, 1 => B"00001000";
        4, 1 => B"00010000";
        5, 1 => B"00100000";
        6, 1 => B"01000000";
        7, 1 => B"10000000";
    END TABLE;

END;
```

### Verilog
{% include_code decoder38/decoder38_14.v %}

### Rtl
![image](https://dl.dropboxusercontent.com/u/128996895/Blog/38%E8%AF%91%E7%A0%81%E5%99%A8/decoder_14_rtl.png)

<h2 id="decoder38_15">15.门级描述</h2>

### Verilog
太复杂，不写了。

### Rtl
同上。

